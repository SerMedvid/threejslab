/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 public/assets/ShoeConfigurator/shoe.gltf -t 
*/

import React, { useCallback, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Color, Mesh, MeshStandardMaterial } from "three";
import { ThreeEvent } from "@react-three/fiber";
import useStore from "../stores/useStore";
import useRefs from "react-use-refs";

type GLTFResult = GLTF & {
	nodes: {
		shoe: Mesh;
		shoe_1: Mesh;
		shoe_2: Mesh;
		shoe_3: Mesh;
		shoe_4: Mesh;
		shoe_5: Mesh;
		shoe_6: Mesh;
		shoe_7: Mesh;
	};
	materials: {
		laces: MeshStandardMaterial;
		mesh: MeshStandardMaterial;
		caps: MeshStandardMaterial;
		inner: MeshStandardMaterial;
		sole: MeshStandardMaterial;
		stripes: MeshStandardMaterial;
		band: MeshStandardMaterial;
		patch: MeshStandardMaterial;
	};
};

const updateColor = (ref: Mesh | null, color: Color) => {
	if (ref && ref.material instanceof MeshStandardMaterial) {
		ref.material.color = color;
	}
};

export function ShoeModel(props: JSX.IntrinsicElements["group"]) {
	const { nodes, materials } = useGLTF(
		"/assets/ShoeConfigurator/shoe.gltf"
	) as GLTFResult;

	const { setHovered, setSelected } = useStore();
	const [
		lacesRef,
		meshRef,
		capsRef,
		innerRef,
		soleRef,
		stripesRef,
		bandRef,
		patchRef,
	] = useRefs<Mesh>(null);

	const onPointerDown = useCallback(
		(e: ThreeEvent<PointerEvent>) => {
			e.stopPropagation();

			if (e.object instanceof Mesh) {
				setSelected(e.object.material.name);
			}
		},
		[setSelected]
	);

	const onPointOver = useCallback(
		(e: ThreeEvent<PointerEvent>) => {
			e.stopPropagation();

			if (e.object instanceof Mesh) {
				setHovered(e.object.material.name);
			}
		},
		[setHovered]
	);

	const onPointerMissed = useCallback(
		(e: MouseEvent) => {
			setHovered(null);
			setSelected(null);
		},
		[setHovered, setSelected]
	);

	const onPointerOut = useCallback(
		(e: ThreeEvent<PointerEvent>) => {
			setHovered(null);
		},
		[setHovered]
	);

	useEffect(() => {
		const unsubscribe = useStore.subscribe(
			(state) => state.config,
			({ laces, mesh, caps, inner, sole, stripes, band, patch }) => {
				updateColor(lacesRef.current, new Color(laces));
				updateColor(meshRef.current, new Color(mesh));
				updateColor(capsRef.current, new Color(caps));
				updateColor(innerRef.current, new Color(inner));
				updateColor(soleRef.current, new Color(sole));
				updateColor(stripesRef.current, new Color(stripes));
				updateColor(bandRef.current, new Color(band));
				updateColor(patchRef.current, new Color(patch));
			}
		);
	}, [
		bandRef,
		capsRef,
		innerRef,
		lacesRef,
		meshRef,
		patchRef,
		soleRef,
		stripesRef,
	]);

	return (
		<group
			{...props}
			dispose={null}
			position-y={0.25}
			onPointerDown={onPointerDown}
			onPointerOver={onPointOver}
			onPointerMissed={onPointerMissed}
			onPointerOut={onPointerOut}
		>
			<mesh
				ref={lacesRef}
				geometry={nodes.shoe.geometry}
				material={materials.laces}
			/>
			<mesh
				ref={meshRef}
				geometry={nodes.shoe_1.geometry}
				material={materials.mesh}
			/>
			<mesh
				ref={capsRef}
				geometry={nodes.shoe_2.geometry}
				material={materials.caps}
			/>
			<mesh
				ref={innerRef}
				geometry={nodes.shoe_3.geometry}
				material={materials.inner}
			/>
			<mesh
				ref={soleRef}
				geometry={nodes.shoe_4.geometry}
				material={materials.sole}
			/>
			<mesh
				ref={stripesRef}
				geometry={nodes.shoe_5.geometry}
				material={materials.stripes}
			/>
			<mesh
				ref={bandRef}
				geometry={nodes.shoe_6.geometry}
				material={materials.band}
			/>
			<mesh
				ref={patchRef}
				geometry={nodes.shoe_7.geometry}
				material={materials.patch}
			/>
		</group>
	);
}

useGLTF.preload("/assets/ShoeConfigurator/shoe.gltf");
