/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 Fish.gltf -o ../../../../features/PocketmonsterPortals/components/FishModel.tsx -t 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import useStore from "../../store/useStore";

type GLTFResult = GLTF & {
	nodes: {
		Sphere026: THREE.SkinnedMesh;
		Sphere026_1: THREE.SkinnedMesh;
		Sphere026_2: THREE.SkinnedMesh;
		Sphere026_3: THREE.SkinnedMesh;
		Sphere026_4: THREE.SkinnedMesh;
		Sphere026_5: THREE.SkinnedMesh;
		Root: THREE.Bone;
	};
	materials: {
		Fish_Main: THREE.MeshStandardMaterial;
		Fish_Secondary: THREE.MeshStandardMaterial;
		Eye_Black: THREE.MeshStandardMaterial;
		Eye_White: THREE.MeshStandardMaterial;
		Mouth: THREE.MeshStandardMaterial;
		Fish_Flaps: THREE.MeshStandardMaterial;
	};
};

type ActionName =
	| "Death"
	| "Duck"
	| "HitReact"
	| "Idle"
	| "Jump"
	| "Jump_Idle"
	| "Jump_Land"
	| "No"
	| "Punch"
	| "Run"
	| "Walk"
	| "Wave"
	| "Weapon"
	| "Yes";

type GLTFActions = Record<ActionName, THREE.AnimationAction>;

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<
		JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
	>
>;

export function FishModel(props: JSX.IntrinsicElements["group"]) {
	const group = useRef<THREE.Group>(null);
	const { name } = props;
	const { nodes, materials, animations } = useGLTF(
		"/assets/PocketmonsterPortals/models/Fish.gltf"
	) as GLTFResult;
	const { actions } = useAnimations(animations, group);

	const prevAnimationRef = useRef<string | null>();

	useEffect(() => {
		const unsubscribe = useStore.subscribe(
			(state) => state.hovered,
			(hovered) => {
				const isHovered = hovered === name;

				if (isHovered || (!hovered && prevAnimationRef.current !== "Idle")) {
					const action = isHovered ? "Wave" : "Idle";

					if (prevAnimationRef.current) {
						actions[prevAnimationRef.current]?.fadeOut(0.5);
					}

					actions[action]?.reset().fadeIn(0.5).play();
					prevAnimationRef.current = action;
				}
			},
			{ fireImmediately: true }
		);

		return () => {
			unsubscribe();
		};
	}, [actions, name]);

	return (
		<group
			ref={group}
			{...props}
			dispose={null}
		>
			<group name="Scene">
				<group name="CharacterArmature">
					<primitive
						object={nodes.Root}
						key={props.key}
					/>
					<group name="Fish">
						<skinnedMesh
							name="Sphere026"
							geometry={nodes.Sphere026.geometry}
							material={materials.Fish_Main}
							skeleton={nodes.Sphere026.skeleton}
						/>
						<skinnedMesh
							name="Sphere026_1"
							geometry={nodes.Sphere026_1.geometry}
							material={materials.Fish_Secondary}
							skeleton={nodes.Sphere026_1.skeleton}
						/>
						<skinnedMesh
							name="Sphere026_2"
							geometry={nodes.Sphere026_2.geometry}
							material={materials.Eye_Black}
							skeleton={nodes.Sphere026_2.skeleton}
						/>
						<skinnedMesh
							name="Sphere026_3"
							geometry={nodes.Sphere026_3.geometry}
							material={materials.Eye_White}
							skeleton={nodes.Sphere026_3.skeleton}
						/>
						<skinnedMesh
							name="Sphere026_4"
							geometry={nodes.Sphere026_4.geometry}
							material={materials.Mouth}
							skeleton={nodes.Sphere026_4.skeleton}
						/>
						<skinnedMesh
							name="Sphere026_5"
							geometry={nodes.Sphere026_5.geometry}
							material={materials.Fish_Flaps}
							skeleton={nodes.Sphere026_5.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/assets/PocketmonsterPortals/models/Fish.gltf");
