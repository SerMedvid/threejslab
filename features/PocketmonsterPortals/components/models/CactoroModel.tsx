/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 public/assets/PocketmonsterPortals/models/Cactoro.gltf -o ./features/PocketmonsterPortals/components/models/CactoroModel.tsx -t 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import useStore from "../../store/useStore";

type GLTFResult = GLTF & {
	nodes: {
		Cube146: THREE.SkinnedMesh;
		Cube146_1: THREE.SkinnedMesh;
		Cube000: THREE.SkinnedMesh;
		Cube000_1: THREE.SkinnedMesh;
		Cube000_2: THREE.SkinnedMesh;
		Cube000_3: THREE.SkinnedMesh;
		Cube000_4: THREE.SkinnedMesh;
		Body: THREE.Bone;
		Head: THREE.Bone;
	};
	materials: {
		Cactoro_Main: THREE.MeshStandardMaterial;
		Cactoro_Secondary: THREE.MeshStandardMaterial;
		Cactoro_Red: THREE.MeshStandardMaterial;
		Eye_Black: THREE.MeshStandardMaterial;
		Eye_White: THREE.MeshStandardMaterial;
	};
};

type ActionName =
	| "Bite_Front"
	| "Dance"
	| "Death"
	| "HitRecieve"
	| "Idle"
	| "Jump"
	| "No"
	| "Walk"
	| "Yes";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<
		JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
	>
>;

export function CactoroModel(props: JSX.IntrinsicElements["group"]) {
	const group = useRef<THREE.Group>(null);
	const { name } = props;

	const { nodes, materials, animations } = useGLTF(
		"/assets/PocketmonsterPortals/models/Cactoro.gltf"
	) as GLTFResult;
	const { actions } = useAnimations(animations, group);

	const prevAnimationRef = useRef<string | null>();

	useEffect(() => {
		const unsubscribe = useStore.subscribe(
			(state) => state.hovered,
			(hovered) => {
				const isHovered = hovered === name;

				if (isHovered || (!hovered && prevAnimationRef.current !== "Idle")) {
					const action = isHovered ? "Dance" : "Idle";

					if (prevAnimationRef.current) {
						actions[prevAnimationRef.current]?.fadeOut(0.5);
					}

					actions[action]?.reset().fadeIn(0.5).play();
					prevAnimationRef.current = action;
				}
			},
			{ fireImmediately: true }
		);

		return () => {
			unsubscribe();
		};
	}, [actions, name]);

	return (
		<group
			ref={group}
			{...props}
			dispose={null}
		>
			<group name="Scene">
				<group name="CharacterArmature">
					<primitive object={nodes.Body} />
					<primitive object={nodes.Head} />
					<group name="Cactoro_Blob">
						<skinnedMesh
							name="Cube146"
							geometry={nodes.Cube146.geometry}
							material={materials.Cactoro_Main}
							skeleton={nodes.Cube146.skeleton}
						/>
						<skinnedMesh
							name="Cube146_1"
							geometry={nodes.Cube146_1.geometry}
							material={materials.Cactoro_Secondary}
							skeleton={nodes.Cube146_1.skeleton}
						/>
					</group>
					<group name="Cactoro_Blob001">
						<skinnedMesh
							name="Cube000"
							geometry={nodes.Cube000.geometry}
							material={materials.Cactoro_Main}
							skeleton={nodes.Cube000.skeleton}
						/>
						<skinnedMesh
							name="Cube000_1"
							geometry={nodes.Cube000_1.geometry}
							material={materials.Cactoro_Secondary}
							skeleton={nodes.Cube000_1.skeleton}
						/>
						<skinnedMesh
							name="Cube000_2"
							geometry={nodes.Cube000_2.geometry}
							material={materials.Cactoro_Red}
							skeleton={nodes.Cube000_2.skeleton}
						/>
						<skinnedMesh
							name="Cube000_3"
							geometry={nodes.Cube000_3.geometry}
							material={materials.Eye_Black}
							skeleton={nodes.Cube000_3.skeleton}
						/>
						<skinnedMesh
							name="Cube000_4"
							geometry={nodes.Cube000_4.geometry}
							material={materials.Eye_White}
							skeleton={nodes.Cube000_4.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/assets/PocketmonsterPortals/models/Cactoro.gltf");
