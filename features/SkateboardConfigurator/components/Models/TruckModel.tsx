/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/assets/SkateboardConfigurator/models/skateboard-truck.glb -o features/SkateboardConfigurator/components/Models/TruckModel.tsx -t 
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import useStore from "../../stores/useStore";
import gsap from "gsap";
import { ConfigurationPhase, SlideModel } from "../../types";

type GLTFResult = GLTF & {
	nodes: {
		["Truck_-_Bolt1008"]: THREE.Mesh;
		["Truck_-_Bolt2008"]: THREE.Mesh;
		Plane003: THREE.Mesh;
		Plane003_1: THREE.Mesh;
		Plane003_2: THREE.Mesh;
		["Truck_-_Nut008"]: THREE.Mesh;
	};
	materials: {
		["Steal - Black"]: THREE.MeshStandardMaterial;
		["Stopper - Color - 1"]: THREE.MeshStandardMaterial;
		Steal: THREE.MeshStandardMaterial;
	};
};

export function TruckModel({
	texture,
	manageOpacity = true,
	...props
}: SlideModel) {
	const { nodes } = useGLTF(
		"/assets/SkateboardConfigurator/models/skateboard-truck.glb"
	) as GLTFResult;

	const truckRef = useRef<THREE.Group>(null);
	const bolt1Ref = useRef<THREE.Mesh>(null);
	const bolt2Ref = useRef<THREE.Mesh>(null);
	const nutRef = useRef<THREE.Mesh>(null);

	const { textureMap, roughnessMap, metalnessMap, aoMap } = useTexture({
		textureMap: texture,
		roughnessMap:
			"/assets/SkateboardConfigurator/textures/truck/Truck_Bake1_PBR_Roughness.png",
		metalnessMap:
			"/assets/SkateboardConfigurator/textures/truck/Truck_Bake1_PBR_Metalness.png",
		aoMap:
			"/assets/SkateboardConfigurator/textures/truck/Truck_Bake1_PBR_Ambient Occlusion.png",
	});

	textureMap.flipY = false;
	textureMap.colorSpace = THREE.SRGBColorSpace;
	roughnessMap.flipY = false;
	metalnessMap.flipY = false;
	aoMap.flipY = false;

	const material = useMemo(() => {
		// const mat = materials.Steal.clone();
		const mat = new THREE.MeshStandardMaterial({
			metalness: 1,
			roughness: 1,
			map: textureMap,
			metalnessMap,
			roughnessMap,
			transparent: true,
			opacity: manageOpacity ? 0 : 1,
		});

		// mat.emissiveMap = aoMap;

		return mat;
	}, [textureMap, metalnessMap, roughnessMap, manageOpacity]);

	useEffect(() => {
		const unsubscribe = useStore.subscribe(
			(state) => state.configurationPhase === ConfigurationPhase.TRUCK,
			(isEndered) => {
				if (
					isEndered &&
					manageOpacity &&
					truckRef.current &&
					bolt1Ref.current &&
					bolt2Ref.current &&
					nutRef.current
				) {
					gsap
						.timeline({ defaults: { duration: 0.5 } })
						.delay(1.5)
						.from(
							truckRef.current!.position,
							{
								y: -0.05,
							},
							"-=0.2"
						)
						.from(
							bolt1Ref.current!.position,
							{
								y: 0.15,
							},
							"<"
						)
						.from(
							bolt2Ref.current!.position,
							{
								y: 0.15,
							},
							"<"
						)
						.from(
							nutRef.current!.position,
							{
								y: -0.15,
							},
							"<"
						);
				}
			}
		);

		return () => {
			unsubscribe();
		};
	}, [material, manageOpacity]);

	return (
		<group
			{...props}
			dispose={null}
		>
			<group position={[1.007, 0.004, 0]}>
				<mesh
					ref={bolt1Ref}
					geometry={nodes["Truck_-_Bolt1008"].geometry}
					material={material}
					position={[0.156, 0.071, -0.103]}
				/>
				<mesh
					ref={bolt2Ref}
					geometry={nodes["Truck_-_Bolt2008"].geometry}
					material={material}
					position={[-0.156, -0.033, -0.103]}
				/>
				<group
					rotation={[-Math.PI, 0, 0]}
					ref={truckRef}
				>
					<mesh
						geometry={nodes.Plane003.geometry}
						material={material}
					/>
					<mesh
						geometry={nodes.Plane003_1.geometry}
						material={material}
					/>
					<mesh
						geometry={nodes.Plane003_2.geometry}
						material={material}
					/>
				</group>
				<mesh
					ref={nutRef}
					geometry={nodes["Truck_-_Nut008"].geometry}
					material={material}
					position={[0, 0, -0.001]}
					rotation={[-Math.PI, 0, 0]}
				/>
			</group>
		</group>
	);
}

useGLTF.preload("/assets/SkateboardConfigurator/models/skateboard-truck.glb");
useTexture.preload(
	"/assets/SkateboardConfigurator/textures/truck/Truck_Bake1_PBR_Roughness.png"
);
useTexture.preload(
	"/assets/SkateboardConfigurator/textures/truck/Truck_Bake1_PBR_Metalness.png"
);
useTexture.preload(
	"/assets/SkateboardConfigurator/textures/truck/Truck_Bake1_PBR_Ambient Occlusion.png"
);
