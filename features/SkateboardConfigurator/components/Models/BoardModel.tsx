/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/assets/SkateboardConfigurator/models/skateboard-board.glb -o features/SkateboardConfigurator/components/Models/BoardModel.tsx -t 
*/

import * as THREE from "three";
import React, { useMemo } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
	nodes: {
		Vert046: THREE.Mesh;
		Vert046_1: THREE.Mesh;
		Vert046_2: THREE.Mesh;
	};
	materials: {
		["Board - Black.001"]: THREE.MeshStandardMaterial;
		["Board - Base Color"]: THREE.MeshStandardMaterial;
	};
};

type Props = JSX.IntrinsicElements["group"] & {
	texture: string;
	renderBack?: boolean;
};

export function BoardModel({ texture, renderBack = true, ...props }: Props) {
	const { nodes, materials } = useGLTF(
		"/assets/SkateboardConfigurator/models/skateboard-board.glb"
	) as GLTFResult;

	const textureMap = useTexture(texture);
	textureMap.flipY = false;

	const topMaterial = useMemo(() => {
		const material = materials["Board - Black.001"].clone();
		material.map = textureMap;
		material.side = THREE.FrontSide;

		return material;
	}, [materials, textureMap]);

	const coverMaterial = useMemo(() => {
		const material = materials["Board - Base Color"].clone();
		material.map = textureMap;
		material.side = THREE.FrontSide;
		material.transparent = true;

		return material;
	}, [materials, textureMap]);

	return (
		<group
			{...props}
			dispose={null}
		>
			{renderBack && (
				<mesh
					geometry={nodes.Vert046.geometry}
					material={topMaterial}
				/>
			)}

			<mesh
				geometry={nodes.Vert046_1.geometry}
				material={coverMaterial}
			/>
			<mesh
				geometry={nodes.Vert046_2.geometry}
				material={coverMaterial}
			/>
		</group>
	);
}

useGLTF.preload("/assets/SkateboardConfigurator/models/skateboard-board.glb");
