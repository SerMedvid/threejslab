/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/assets/ProductShowcase/scene-2.glb -o features/ProductShowcase/components/Slide2.tsx -t 
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import TrackableObject from "./TrackableObject";
import FakeShadow from "./FakeShadow";

type GLTFResult = GLTF & {
	nodes: {
		Chair002: THREE.Mesh;
		GardenChair001: THREE.Mesh;
		Purifier001: THREE.Mesh;
		Vert: THREE.Mesh;
	};
	materials: {
		["Material.Scene3"]: THREE.MeshStandardMaterial;
	};
};

type Props = JSX.IntrinsicElements["group"] & {
	slide: number;
};

const sphere = new THREE.SphereGeometry(0.7, 16, 16);

export function Slide2({ slide, ...props }: Props) {
	const { nodes, materials } = useGLTF(
		"/assets/ProductShowcase/scene-2.glb"
	) as GLTFResult;

	return (
		<group
			{...props}
			dispose={null}
		>
			<TrackableObject
				slide={slide}
				offset={0}
				motionPathScale={0.5}
				position={[-0.136, 0.13, -0.1]}
			>
				<mesh
					userData={{
						isBlurred: true,
					}}
					geometry={sphere}
				>
					<meshStandardMaterial color="#ffea8f" />
				</mesh>
			</TrackableObject>
			<TrackableObject
				slide={slide}
				offset={0.085}
				motionPathScale={0.8}
				position={[-0.136, 0.13, -0.36]}
				shadow={
					<FakeShadow
						slide={slide}
						color="#ffdf6b"
						opacity={0.1}
						scale={4}
					/>
				}
			>
				<mesh
					rotation={[-Math.PI, -1.007, 2.825]}
					geometry={nodes.Chair002.geometry}
					material={materials["Material.Scene3"]}
				></mesh>
			</TrackableObject>
			<TrackableObject
				slide={slide}
				offset={0.2}
				motionPathScale={0.6}
				position={[-0.136, 0.13, -0.7]}
			>
				<mesh
					userData={{
						isBlurred: true,
					}}
					geometry={sphere}
					scale={0.8}
				>
					<meshStandardMaterial color="#d784fa" />
				</mesh>
			</TrackableObject>
		</group>
	);
}

useGLTF.preload("/assets/ProductShowcase/scene-2.glb");
