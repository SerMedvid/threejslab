/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/assets/ProductShowcase/scene-1.glb -o features/ProductShowcase/components/Slide1.tsx -t 
*/

import * as THREE from "three";
import React, { useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import TrackableObject from "./TrackableObject";
import FakeShadow from "./FakeShadow";

type GLTFResult = GLTF & {
	nodes: {
		ChairPyramid: THREE.Mesh;
		Pillow001: THREE.Mesh;
		Sofa001: THREE.Mesh;
		Lamp001: THREE.Mesh;
	};
	materials: {
		["Material.Scene1"]: THREE.MeshStandardMaterial;
	};
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

type Props = JSX.IntrinsicElements["group"] & {
	slide: number;
};

export function Slide1({ slide, ...props }: Props) {
	const { nodes, materials } = useGLTF(
		"/assets/ProductShowcase/scene-1.glb"
	) as GLTFResult;

	const { chairMaterial, pillowMaterial, sofaMaterial } = useMemo(
		() => ({
			chairMaterial: materials["Material.Scene1"].clone(),
			pillowMaterial: materials["Material.Scene1"].clone(),
			sofaMaterial: materials["Material.Scene1"].clone(),
		}),
		[materials]
	);

	return (
		<>
			<TrackableObject
				slide={slide}
				offset={0.05}
				motionPathScale={0.5}
				position={[-1.5, 0.03, 0.732]}
				rotation={[0, 1.045, 0]}
			>
				<mesh
					geometry={nodes.ChairPyramid.geometry}
					material={chairMaterial}
					userData={{
						isBlurred: true,
					}}
				/>
			</TrackableObject>

			<TrackableObject
				slide={slide}
				offset={0.2}
				motionPathScale={0.75}
				position={[0.245, 0, 0.7]}
				rotation={[1.256, 0.599, 0.524]}
			>
				<mesh
					geometry={nodes.Pillow001.geometry}
					material={pillowMaterial}
					userData={{
						isBlurred: true,
					}}
				/>
			</TrackableObject>

			<TrackableObject
				slide={slide}
				offset={0.1}
				motionPathScale={0.85}
				position={[0, 0, -1.75]}
				shadow={
					<FakeShadow
						slide={slide}
						color="#a86bfb"
						opacity={0.1}
						scale={4}
					/>
				}
			>
				<mesh
					rotation={[0, -Math.PI / 2, 0]}
					geometry={nodes.Sofa001.geometry}
					material={sofaMaterial}
				></mesh>
			</TrackableObject>
		</>
	);
}

useGLTF.preload("/assets/ProductShowcase/scene-1.glb");
