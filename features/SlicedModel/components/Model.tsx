/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/assets/SlicedModel/gears.glb -o features/SlicedModel/components/Model.tsx -t 
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import CustomShaderMaterial from "three-custom-shader-material";

import fragmentShader from "../shaders/sliced/fragment.glsl";
import vertexShader from "../shaders/sliced/vertex.glsl";
import { useControls } from "leva";

type GLTFAction = THREE.AnimationClip & {
	name: string;
};

type GLTFResult = GLTF & {
	nodes: {
		outerHull: THREE.Mesh;
		axle: THREE.Mesh;
		gears: THREE.Mesh;
	};
	materials: {};
	animations: GLTFAction[];
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

const patchMap = {
	csm_Slice: {
		"#include <colorspace_fragment>": `
			#include <colorspace_fragment>

			if(!gl_FrontFacing) {
				gl_FragColor = vec4(0.75, 0.15, 0.3, 1.);
			}
		`,
	},
};

export function Model(props: JSX.IntrinsicElements["group"]) {
	const { nodes } = useGLTF("/assets/SlicedModel/gears.glb") as GLTFResult;

	const { sliceStart, sliceArc } = useControls({
		sliceStart: {
			value: 1.75,
			min: -Math.PI,
			max: Math.PI,
			step: 0.001,
		},
		sliceArc: {
			value: 1.25,
			min: 0,
			max: Math.PI * 2,
			step: 0.001,
		},
	});

	const uniforms = useMemo(
		() => ({
			uSliceStart: new THREE.Uniform(sliceStart),
			uSliceArc: new THREE.Uniform(sliceArc),
		}),
		[sliceStart, sliceArc]
	);

	const material = useMemo(() => {
		return (
			<meshStandardMaterial
				metalness={0.5}
				roughness={0.25}
				envMapIntensity={0.5}
				color={"#858080"}
			/>
		);
	}, []);

	const modelRef = useRef<THREE.Group>(null);

	useFrame((_, delta) => {
		if (modelRef.current) {
			modelRef.current.rotation.y += delta * 0.1;
		}
	});

	return (
		<group
			{...props}
			dispose={null}
			ref={modelRef}
		>
			<mesh
				geometry={nodes.outerHull.geometry}
				scale={3.714}
				castShadow
				receiveShadow
			>
				<CustomShaderMaterial
					key={Date.now()}
					baseMaterial={THREE.MeshStandardMaterial}
					fragmentShader={fragmentShader}
					vertexShader={vertexShader}
					silent
					metalness={0.5}
					roughness={0.25}
					envMapIntensity={0.5}
					color={"#858080"}
					uniforms={uniforms}
					side={THREE.DoubleSide}
					patchMap={patchMap}
				/>

				<CustomShaderMaterial
					attach="customDepthMaterial"
					key={Date.now()}
					baseMaterial={THREE.MeshDepthMaterial}
					fragmentShader={fragmentShader}
					vertexShader={vertexShader}
					silent
					uniforms={uniforms}
					patchMap={patchMap}
					depthPacking={THREE.RGBADepthPacking}
				/>
			</mesh>
			<mesh
				geometry={nodes.axle.geometry}
				castShadow
				receiveShadow
			>
				{material}
			</mesh>
			<mesh
				geometry={nodes.gears.geometry}
				position={[0, 1.595, -0.691]}
				rotation={[-Math.PI, 0, -Math.PI]}
				scale={[1, 1, 1.016]}
				castShadow
				receiveShadow
			>
				{material}
			</mesh>
		</group>
	);
}

useGLTF.preload("/assets/SlicedModel/gears.glb");
