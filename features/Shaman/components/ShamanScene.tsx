/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 public/assets/Shaman/shaman.glb -o features/Shaman/components/ShamanModel.tsx -t 
*/

import * as THREE from "three";
import React, { useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import Wisp from "./Wisp";

import wisperVertex from "../shaders/wispVertex.glsl";
import wisperFragment from "../shaders/wispFragment.glsl";
import Terrain from "./Terrain";
import { Uniform } from "three";

type GLTFResult = GLTF & {
	nodes: {
		Belt: THREE.Mesh;
		Body_1: THREE.Mesh;
		Body_2: THREE.Mesh;
		Body_3: THREE.Mesh;
		Body_4: THREE.Mesh;
		Body_5: THREE.Mesh;
		Body_6: THREE.Mesh;
		Boots: THREE.Mesh;
		Neckless_1: THREE.Mesh;
		Neckless_2: THREE.Mesh;
		Neckless_3: THREE.Mesh;
		Shorts: THREE.Mesh;
		Wisp: THREE.Mesh;
		Wisp001: THREE.Mesh;
		Wisp002: THREE.Mesh;
		Land_1: THREE.Mesh;
		Land_2: THREE.Mesh;
		Land_3: THREE.Mesh;
		Water: THREE.Mesh;
		Tree_1: THREE.Mesh;
		Tree_2: THREE.Mesh;
		root: THREE.Bone;
		["MCH-torsoparent"]: THREE.Bone;
		["MCH-hand_ikparentL"]: THREE.Bone;
		["MCH-upper_arm_ik_targetparentL"]: THREE.Bone;
		["MCH-hand_ikparentR"]: THREE.Bone;
		["MCH-upper_arm_ik_targetparentR"]: THREE.Bone;
		["MCH-foot_ikparentL"]: THREE.Bone;
		["MCH-thigh_ik_targetparentL"]: THREE.Bone;
		["MCH-foot_ikparentR"]: THREE.Bone;
		["MCH-thigh_ik_targetparentR"]: THREE.Bone;
	};
	materials: {
		Lether2: THREE.MeshStandardMaterial;
		Body: THREE.MeshStandardMaterial;
		Feather: THREE.MeshStandardMaterial;
		Mask: THREE.MeshStandardMaterial;
		Lether: THREE.MeshStandardMaterial;
		Branches: THREE.MeshStandardMaterial;
		Head: THREE.MeshStandardMaterial;
		Bronze: THREE.MeshStandardMaterial;
		Crystal: THREE.MeshPhysicalMaterial;
		Wisp: THREE.MeshStandardMaterial;
		Sand: THREE.MeshStandardMaterial;
		Grass: THREE.MeshStandardMaterial;
		Water: THREE.MeshStandardMaterial;
		Tree: THREE.MeshStandardMaterial;
	};
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<
		JSX.IntrinsicElements["mesh"] | JSX.IntrinsicElements["bone"]
	>
>;

export function ShamanScene(props: JSX.IntrinsicElements["group"]) {
	const { nodes, materials } = useGLTF(
		"/assets/Shaman/shaman.glb"
	) as GLTFResult;

	const wispMaterial = useMemo(() => {
		return new THREE.ShaderMaterial({
			vertexShader: wisperVertex,
			fragmentShader: wisperFragment,
			transparent: true,
			uniforms: {
				uBaseTexture: new Uniform(materials.Wisp.emissiveMap),
			},
		});
	}, []);

	return (
		<group
			{...props}
			dispose={null}
		>
			<group position={[0, -0.058, 0]}>
				<primitive object={nodes.root} />
				<primitive object={nodes["MCH-torsoparent"]} />
				<primitive object={nodes["MCH-hand_ikparentL"]} />
				<primitive object={nodes["MCH-upper_arm_ik_targetparentL"]} />
				<primitive object={nodes["MCH-hand_ikparentR"]} />
				<primitive object={nodes["MCH-upper_arm_ik_targetparentR"]} />
				<primitive object={nodes["MCH-foot_ikparentL"]} />
				<primitive object={nodes["MCH-thigh_ik_targetparentL"]} />
				<primitive object={nodes["MCH-foot_ikparentR"]} />
				<primitive object={nodes["MCH-thigh_ik_targetparentR"]} />
				<mesh
					geometry={nodes.Belt.geometry}
					material={materials.Lether2}
					position={[0, 0.013, 0]}
					scale={0.27}
				/>
				<mesh
					geometry={nodes.Boots.geometry}
					material={materials.Lether2}
					position={[0, -0.037, 0]}
					scale={0.27}
				/>
				<group
					position={[-0.001, 1.257, 0.531]}
					rotation={[-0.672, 0, 0]}
				>
					<mesh
						geometry={nodes.Neckless_1.geometry}
						material={materials.Lether2}
					/>
					<mesh
						geometry={nodes.Neckless_2.geometry}
						material={materials.Bronze}
					/>
					<mesh
						geometry={nodes.Neckless_3.geometry}
						material={materials.Crystal}
					/>
				</group>
				<mesh
					geometry={nodes.Shorts.geometry}
					material={materials.Lether}
					position={[0, 0.013, 0]}
					scale={0.27}
				/>

				<Wisp
					nodes={nodes}
					materials={{ Wisp: wispMaterial }}
					position={[0.38, 0.702, 2.494]}
					rotation={[-Math.PI, 0.307, -Math.PI]}
					knot={{
						rotation: [Math.PI / 2, 0, 0],
						position: [0, 2, 0],
					}}
				/>

				<Wisp
					nodes={nodes}
					materials={{ Wisp: wispMaterial }}
					position={[-0.765, 1.697, 1.549]}
					rotation={[0, -1.564, 0]}
					knot={{
						rotation: [-Math.PI / 2, 0, 0],
						position: [0, 2.5, 0],
					}}
				/>

				<Wisp
					nodes={nodes}
					materials={{ Wisp: wispMaterial }}
					position={[2.108, 1.279, -1.027]}
					rotation={[-Math.PI, 1.482, -Math.PI]}
					knot={{
						rotation: [0, Math.PI / 2, 0],
						position: [0, 2.5, 0],
					}}
				/>

				<mesh
					geometry={nodes.Body_1.geometry}
					material={materials.Body}
					castShadow
				/>
				<mesh
					geometry={nodes.Body_2.geometry}
					material={materials.Feather}
					castShadow
				/>
				<mesh
					geometry={nodes.Body_3.geometry}
					material={materials.Mask}
				/>
				<mesh
					geometry={nodes.Body_4.geometry}
					material={materials.Lether}
				/>
				<mesh
					geometry={nodes.Body_5.geometry}
					material={materials.Branches}
					castShadow
				/>
				<mesh
					geometry={nodes.Body_6.geometry}
					material={materials.Head}
				/>
			</group>

			<group
				position={[-3.292, -0.499, -2.725]}
				rotation={[0, 0, 0.075]}
			>
				<mesh
					geometry={nodes.Tree_1.geometry}
					material={materials.Tree}
				/>
				<mesh
					geometry={nodes.Tree_2.geometry}
					material={materials.Branches}
				/>
			</group>
			<group
				position={[-1.072, -0.437, -3.473]}
				rotation={[0, 0, -0.024]}
				scale={0.7}
			>
				<mesh
					geometry={nodes.Tree_1.geometry}
					material={materials.Tree}
				/>
				<mesh
					geometry={nodes.Tree_2.geometry}
					material={materials.Branches}
				/>
			</group>
			<group
				position={[-2.89, -0.381, 0.115]}
				rotation={[0, 0, 0.016]}
				scale={0.503}
			>
				<mesh
					geometry={nodes.Tree_1.geometry}
					material={materials.Tree}
				/>
				<mesh
					geometry={nodes.Tree_2.geometry}
					material={materials.Branches}
				/>
			</group>

			<Terrain
				nodes={nodes}
				materials={materials}
			/>
		</group>
	);
}

useGLTF.preload("/assets/Shaman/shaman.glb");
