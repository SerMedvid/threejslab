/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 ../../../public/assets/GlassEffect/lens-transformed.glb -t 
*/

import * as THREE from "three";
import React, { ForwardedRef, forwardRef, useRef, ElementRef } from "react";
import { MeshTransmissionMaterial, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useControls } from "leva";
import { useFrame } from "@react-three/fiber";
import { easing } from "maath";

type GLTFResult = GLTF & {
	nodes: {
		Cylinder: THREE.Mesh;
	};
	materials: {};
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

type Props = JSX.IntrinsicElements["mesh"] & {
	damping?: number;
};

const Lens = forwardRef<ElementRef<typeof MeshTransmissionMaterial>, Props>(
	({ damping = 0.15, ...props }, materialRef) => {
		const { nodes } = useGLTF(
			"/assets/GlassEffect/lens-transformed.glb"
		) as GLTFResult;

		const { ior, thickness, anisotropy, chromaticAberration } = useControls({
			ior: { value: 1.2, step: 0.1 },
			thickness: { value: 1.5, step: 0.1 },
			anisotropy: {
				value: 0.1,
				min: 0,
				max: 1,
				step: 0.01,
			},
			chromaticAberration: {
				value: 0.04,
				min: 0,
				max: 1,
				step: 0.01,
			},
		});

		const ref = useRef<THREE.Mesh>(null);

		useFrame((state, delta) => {
			const viewport = state.viewport.getCurrentViewport(
				state.camera,
				[0, 0, 15]
			);

			if (ref.current) {
				easing.damp3(
					ref.current.position,
					[
						(state.pointer.x * viewport.width) / 2,
						(state.pointer.y * viewport.height) / 2,
						15,
					],
					damping,
					delta
				);
			}
		});

		return (
			<mesh
				{...props}
				ref={ref}
				rotation-x={Math.PI / 2}
				geometry={nodes.Cylinder.geometry}
				material={nodes.Cylinder.material}
				scale={0.25}
			>
				<MeshTransmissionMaterial
					ior={ior}
					thickness={thickness}
					anisotropy={anisotropy}
					chromaticAberration={chromaticAberration}
					distortionScale={0}
					temporalDistortion={0}
				/>
			</mesh>
		);
	}
);

Lens.displayName = "Lens";

export { Lens };

useGLTF.preload("/assets/GlassEffect/lens-transformed.glb");
